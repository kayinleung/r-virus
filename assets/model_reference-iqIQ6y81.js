const e='library(PBSddesolve)\nlibrary(escape2024)\nlibrary(jsonlite)\n\ntryCatch({\n  # negative binomial network model\n  size = `${dispersion}`\n  prob = size / (size + `${mu}`)\n\n  degree_nb = list(degree_distribution = "negative_binomial", size = size, prob = prob)\n  c_degree_nb = mean_excess_degree(degree_nb)\n\n  stopifnot(c_degree_nb - `${reproduction_number}` > 0)\n\n\n  infectiousness_rate_nb = 2 / `${serial_interval}`\n  recovery_rate_nb = 2 / `${serial_interval}`\n  transmission_rate_nb = `${reproduction_number}` * recovery_rate_nb / (c_degree_nb - `${reproduction_number}`)\n\n  params_nb <- c(\n    list(\n    transmission_rate = transmission_rate_nb,\n    infectiousness_rate = infectiousness_rate_nb,\n    recovery_rate = recovery_rate_nb,\n    population_size = `${population_size}`,\n    seed_infected = `${seed_infected}`\n  ),\n    degree_nb\n  ) \n\n  #poisson network model\n  lambda = `${mu}`\n\n  degree_poisson = list(degree_distribution = "poisson", lambda = lambda)\n  c_degree_poisson = mean_excess_degree(degree_poisson)\n\n  stopifnot(c_degree_poisson - `${reproduction_number}` > 0)\n\n  infectiousness_rate_poisson = 2 / `${serial_interval}`\n  recovery_rate_poisson = 2 / `${serial_interval}`\n  transmission_rate_poisson = `${reproduction_number}` * recovery_rate_poisson / (c_degree_poisson - `${reproduction_number}`)\n\n  params_p <- c(list(\n    transmission_rate = transmission_rate_poisson,\n    infectiousness_rate = infectiousness_rate_poisson,\n    recovery_rate = recovery_rate_poisson,\n    population_size = `${population_size}`,\n    seed_infected = `${seed_infected}`\n  ), degree_poisson)\n\n  # reference model\n  infectiousness_rate_reference = 2 / `${serial_interval}`\n  recovery_rate_reference = 2 / `${serial_interval}`\n  transmission_rate_reference = `${reproduction_number}` * recovery_rate_reference\n  params_reference <- list(\n          transmission_rate = transmission_rate_reference,\n          infectiousness_rate = infectiousness_rate_reference,\n          recovery_rate = recovery_rate_reference,\n          population_size = `${population_size}`,\n          seed_infected = `${seed_infected}`\n  )\n\n  models_combined(simulation_id = "`${simulation_id}`", time_end = `${time_end}`, increment = `${increment}`, params_p, params_nb, params_reference)\n\n  flush.console()\n}, error = function(e) {\n  print(jsonlite::toJSON(\n    list(error = list(simulation_id = "`${simulation_id}`"), \n        message = conditionMessage(e)), \n    auto_unbox = TRUE, \n    pretty = FALSE\n  ), stderr())\n}, finally = {\n  flush.console()\n})';export{e as default};
